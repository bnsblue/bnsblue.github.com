<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stream of (Un)Consciousness]]></title>
  <link href="http://bnsblue.github.com/atom.xml" rel="self"/>
  <link href="http://bnsblue.github.com/"/>
  <updated>2012-03-19T15:45:33+08:00</updated>
  <id>http://bnsblue.github.com/</id>
  <author>
    <name><![CDATA[bnsblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Technical Blogging with Octopress and MathJax]]></title>
    <link href="http://bnsblue.github.com/blog/2012/03/18/technical-blogging-with-octopress-and-mathjax/"/>
    <updated>2012-03-18T14:46:00+08:00</updated>
    <id>http://bnsblue.github.com/blog/2012/03/18/technical-blogging-with-octopress-and-mathjax</id>
    <content type="html"><![CDATA[<h1>Front Matter</h1>

<p>This is a test post using Octopress and MathJax on github page! I think that this solution is quite satisfactory for technical posts. Such version of octopress is modified so that <script type="math/tex">\LaTeX</script> can be correctly rendered by MathJax. Together with the intrinsic <code>codeblock</code> plugin, octopress is now one of the best blogging environment for technical posts!</p>

<hr />

<!--more-->


<h1>LaTeX Rendering with MathJax</h1>

<p>MathJax is a state-of-the-art <script type="math/tex">\LaTeX</script> rendering plugin for normal browsers. Using it is convenient and easy.</p>

<h2>Basic MathJax Integration</h2>

<p>The original source of this approach can be found <a href="http://greglus.com/blog/2011/11/29/integrate-MathJax-LaTeX-and-MathML-Markup-in-Octopress/">here</a>.</p>

<p>It is simple to integrate the MathJax into octopress framework &#8211; once you embed the code into <code>octopress/source/_includes/head.html</code> then it is done. The only step left is that you should write your LaTeX formulae legally. Because of the <code>rake generate</code> command will compile the markdown file, you should use <code>&lt;div markdown="0"&gt;</code> and <code>&lt;/div&gt;</code> to bracket the LaTex code.</p>

<figure class='code'><figcaption><span>LaTeX integration  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">markdown=</span><span class="s">&quot;0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   Your_LaTeX_code_here
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deploy and refresh the browser. You should now be able to see the rendered formulae show up on your blog.</p>

<h2>Inline LaTeX formulae</h2>

<p>However, the work-around mentioned above cannot cope with inline <script type="math/tex">\LaTeX</script> formulae. To solve this problem, I read through the discussion and found <a href="https://github.com/imathis/octopress/pull/447/files">this</a>. To handle this, <strong>NSError</strong> has add a plugin to octopress. However, it is not yet merge to the master of octopress by imathis.</p>

<p>No worries. This plugin is very straightforward that we can simply implement it on our own.</p>

<hr />

<h1>Examples</h1>

<p>I use my note on the survey of Type System as example as follows:</p>

<p>Today we are going to talk about the type system.</p>

<p>For example, we write some math formulae.
This is <script type="math/tex">\Gamma\vdash_\gamma h_1</script></p>

<hr />

<h1>Type Checking Example</h1>

<figure class='code'><figcaption><span>Example:(Java)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="nf">f</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Explicit type declarations</em> provide types for key points:<br/>
-   f:integer->integer<br/>
-   x:integer</p>

<p>use the command <code>test</code></p>
]]></content>
  </entry>
  
</feed>
