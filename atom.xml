<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stream of (Un)Consciousness]]></title>
  <link href="http://bnsblue.github.com/atom.xml" rel="self"/>
  <link href="http://bnsblue.github.com/"/>
  <updated>2012-03-21T13:22:14+08:00</updated>
  <id>http://bnsblue.github.com/</id>
  <author>
    <name><![CDATA[bnsblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Technical Blogging with Octopress and MathJax]]></title>
    <link href="http://bnsblue.github.com/blog/2012/03/18/technical-blogging-with-octopress-and-mathjax/"/>
    <updated>2012-03-18T14:46:00+08:00</updated>
    <id>http://bnsblue.github.com/blog/2012/03/18/technical-blogging-with-octopress-and-mathjax</id>
    <content type="html"><![CDATA[<h1>Front Matter</h1>

<p>This is a test post using Octopress and MathJax on github page! I think that this solution is quite satisfactory for technical posts. Such version of octopress is modified so that {% m %}\LaTeX{% em %} can be correctly rendered by MathJax. Together with the intrinsic <code>codeblock</code> plugin, octopress is now one of the best blogging environment for technical posts!</p>

<!--more-->


<hr />

<h1>LaTeX Rendering with MathJax</h1>

<p>MathJax is a state-of-the-art {% m %}\LaTeX{% em %} rendering plugin for normal browsers. Using it is convenient and easy.
And this is a test for inline {% m %}\LaTeX_\gamma{% em %}</p>

<p>Another test {% raw %}\(\Gamma,\Sigma,\Delta,\Alpha\){% endraw %}</p>

<h2>Basic MathJax Integration</h2>

<p>The original source of this approach can be found <a href="http://greglus.com/blog/2011/11/29/integrate-MathJax-LaTeX-and-MathML-Markup-in-Octopress/">here</a>.</p>

<p>It is simple to integrate the MathJax into octopress framework &#8211; once you embed the code into <code>octopress/source/_includes/head.html</code> then it is done. The only step left is that you should write your LaTeX formulae legally. Because of the <code>rake generate</code> command will compile the markdown file, you should use <code>&lt;div markdown="0"&gt;</code> and <code>&lt;/div&gt;</code> to bracket the LaTex code.</p>

<blockquote><p>hihi</p></blockquote>

<p>{% codeblock LaTeX integration lang:html %}</p>

<div markdown="0">
   Your_LaTeX_code_here
</div>


<p>{% endcodeblock %}</p>

<p>Deploy and refresh the browser. You should now be able to see the rendered formulae show up on your blog.</p>

<h2>Inline LaTeX formulae</h2>

<p>However, the work-around mentioned above cannot cope with inline {% m %}\LaTeX{% em %} formulae. To solve this problem, I read through the discussion and found <a href="https://github.com/imathis/octopress/pull/447/files">this</a>. To handle this, <strong>NSError</strong> has add a plugin to octopress. However, it is not yet merge to the master of octopress by imathis.</p>

<p>No worries. This plugin is very straightforward that we can simply implement it on our own.</p>

<p>{% include_code MathJax-plugin implementation lang:ruby plugins/MathJax.rb %}</p>

<p>Here I&#8217;ve made a minor modification to the approach. I&#8217;ve added the labels <code>&lt;span markdown="0"&gt;</code> before <code>&lt;script type...&gt;</code> and <code>&lt;/span&gt;</code> after <code>&lt;/script&gt;</code>. Such modification leaves the frequently-used-in-LaTeX underscore <code>_</code> uninterpreted by the Markdown interpreter. Thus, there&#8217;s no need to escape the underscore anymore. That is, the LaTeX code you type between <code>{% raw %}{% m %}{% endraw %}</code> and <code>{% raw %}{% em %}{% endraw %}</code> is now the same as that you type in a LaTeX editor.</p>

<p>Please notice that this approach should be mainly attributed to <a href="https://github.com/imathis/octopress/pull/447/files"><strong>NSError and his post</strong></a>.</p>

<hr />

<h1>Examples</h1>

<p>I use my note on the survey of Type System as example as follows:</p>

<p>Today we are going to talk about the type system.</p>

<p>For example, we write some math formulae.
This is {% m %}\Gamma\vdash_\gamma h_1{% em %}</p>

<hr />

<h1>Type Checking Example</h1>

<p>{% codeblock Example:(Java) lang:java %}
int f(int x)
{
   return 2*x+1;
}
{% endcodeblock%}</p>

<p><em>Explicit type declarations</em> provide types for key points:<br/>
-   f:integer->integer<br/>
-   x:integer</p>

<p>use the command <code>test</code></p>

<hr />

<h1>Octopress Font Size Modification</h1>

<p>follow the <a href="http://simplypatrick.heroku.com/blog/2011/10/08/hello-octopress">instruction</a></p>

<h2>Google Webfont</h2>

<p>should check <a href="http://simplypatrick.heroku.com/blog/2011/10/08/hello-octopress">Google Webfont</a> out often. Very useful</p>

<hr />

<h1>Escape &#8220;{%&#8221; and &#8220;%}&#8221;</h1>

<p>use <code>{% raw %}</code> and <code>{% endraw %}</code></p>
]]></content>
  </entry>
  
</feed>
